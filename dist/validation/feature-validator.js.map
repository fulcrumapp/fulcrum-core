{"version":3,"sources":["../../src/validation/feature-validator.js"],"names":["FeatureValidator","validateFeature","feature","record","formValues","Record","validateRecord","RepeatableItemValue","validateRepeatableItem","errors","isStatusFieldEnabled","status","push","RequiredFieldValidationError","form","statusField","statusForValue","CustomValidationError","isGeometryRequired","hasCoordinate","GeometryRequiredValidationError","cache","validateFieldsInElements","elements","repeatableItem","element","visibilityCache","isSectionElement","visible","Condition","shouldElementBeVisible","required","shouldElementBeRequired","disabled","isDisabled","validatable","fieldValue","get","key","error","validateRequiredField","isTextElement","isNumeric","textValue","validateNumericField","hasPattern","validatePatternOfElement","isDateElement","validateDateField","isTimeElement","validateTimeField","isLengthValidationSupported","validateLengthForElement","isRepeatableElement","repeatableValue","items","item","itemValues","copy","merge","value","isEmpty","isCheckboxElement","isChecked","regex","RegExp","pattern","test","PatternValidationError","hasMinLengthError","hasMaxLengthError","hasMinLength","length","minLength","hasMaxLength","maxLength","LengthValidationError","NumericFormatValidationError","decimalSeparator","isIntegerFormat","indexOf","numberValue","hasMin","min","hasMax","max","NumericRangeValidationError","isValid","DateFormatValidationError","TimeFormatValidationError","formatErrors","messages","message","join"],"mappings":"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","sourcesContent":["import RepeatableItemValue from '../values/repeatable-item-value';\nimport Record from '../record';\nimport Condition from '../elements/condition';\nimport CustomValidationError from './custom-validation-error';\nimport RequiredFieldValidationError from './required-field-validation-error';\nimport GeometryRequiredValidationError from './geometry-required-validation-error';\nimport PatternValidationError from './pattern-validation-error';\nimport LengthValidationError from './length-validation-error';\nimport NumericFormatValidationError from './numeric-format-validation-error';\nimport NumericRangeValidationError from './numeric-range-validation-error';\nimport DateFormatValidationError from './date-format-validation-error';\nimport TimeFormatValidationError from './time-format-validation-error';\n\nexport default class FeatureValidator {\n  static validateFeature(feature, record, formValues) {\n    if (feature instanceof Record) {\n      return FeatureValidator.validateRecord(record, formValues);\n    } else if (feature instanceof RepeatableItemValue) {\n      return FeatureValidator.validateRepeatableItem(feature, record, formValues);\n    }\n\n    return [];\n  }\n\n  static validateRecord(record, formValues) {\n    if (record == null) {\n      return [];\n    }\n\n    const errors = [];\n\n    if (record.isStatusFieldEnabled) {\n      if (record.status == null) {\n        errors.push(new RequiredFieldValidationError(record.form.statusField));\n      } else if (record.form.statusField.statusForValue(record.status) == null) {\n        errors.push(new CustomValidationError(`${record.status} is not a valid status.`));\n      }\n    }\n\n    if (record.form.isGeometryRequired) {\n      if (!record.hasCoordinate) {\n        errors.push(new GeometryRequiredValidationError());\n      }\n    }\n\n    const cache = {};\n\n    this.validateFieldsInElements(record.form.elements, record, formValues, errors, cache);\n\n    return errors;\n  }\n\n  static validateRepeatableItem(repeatableItem, record, formValues) {\n    if (repeatableItem == null) {\n      return [];\n    }\n\n    const errors = [];\n\n    if (repeatableItem.element.isGeometryRequired) {\n      if (!repeatableItem.hasCoordinate) {\n        errors.push(new GeometryRequiredValidationError());\n      }\n    }\n\n    const cache = {};\n\n    FeatureValidator.validateFieldsInElements(repeatableItem.element.elements, record, formValues, errors, cache);\n\n    return errors;\n  }\n\n  static validateFieldsInElements(elements, record, formValues, errors, visibilityCache) {\n    const cache = visibilityCache || {};\n\n    for (const element of elements) {\n      if (element.isSectionElement) {\n        const visible = Condition.shouldElementBeVisible(element, record, formValues, cache);\n\n        if (visible) {\n          FeatureValidator.validateFieldsInElements(element.elements, record, formValues, errors, cache);\n        }\n      } else {\n        const required = Condition.shouldElementBeRequired(element, record, formValues);\n        const visible = Condition.shouldElementBeVisible(element, record, formValues, cache);\n\n        const disabled = element.isDisabled;\n\n        const validatable = (visible && !disabled);\n\n        if (validatable) {\n          if (required) {\n            const fieldValue = formValues.get(element.key);\n\n            const error = FeatureValidator.validateRequiredField(element, fieldValue);\n\n            if (error) {\n              errors.push(error);\n            }\n          }\n\n          if (element.isTextElement) {\n            if (element.isNumeric) {\n              const textValue = formValues.get(element.key);\n\n              const error = FeatureValidator.validateNumericField(element, textValue);\n\n              if (error) {\n                errors.push(error);\n              }\n            } else if (element.hasPattern) {\n              const textValue = formValues.get(element.key);\n\n              const error = FeatureValidator.validatePatternOfElement(element, textValue);\n\n              if (error) {\n                errors.push(error);\n              }\n            }\n          }\n\n          if (element.isDateElement) {\n            const error = FeatureValidator.validateDateField(element, formValues.get(element.key));\n\n            if (error) {\n              errors.push(error);\n            }\n          }\n\n          if (element.isTimeElement) {\n            const error = FeatureValidator.validateTimeField(element, formValues.get(element.key));\n\n            if (error) {\n              errors.push(error);\n            }\n          }\n\n          if (element.isLengthValidationSupported) {\n            const fieldValue = formValues.get(element.key);\n            const error = FeatureValidator.validateLengthForElement(element, fieldValue);\n\n            if (error) {\n              errors.push(error);\n            }\n          }\n        }\n\n        if (element.isRepeatableElement) {\n          const repeatableValue = formValues.get(element.key);\n\n          if (repeatableValue) {\n            for (const item of repeatableValue.items) {\n              const itemValues = item.formValues.copy();\n\n              itemValues.merge(formValues);\n\n              FeatureValidator.validateFieldsInElements(item.element.elements, record, itemValues, errors, null);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  static validateRequiredField(element, value) {\n    if (value == null || value.isEmpty) {\n      return new RequiredFieldValidationError(element);\n    }\n\n    if (element.isCheckboxElement && !value.isChecked) {\n      return new RequiredFieldValidationError(element);\n    }\n\n    return null;\n  }\n\n  static validatePatternOfElement(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    const regex = new RegExp('^(?:' + element.pattern + ')$');\n\n    if (regex) {\n      if (!regex.test(value.textValue)) {\n        return new PatternValidationError(element);\n      }\n    }\n\n    return null;\n  }\n\n  static validateLengthForElement(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    let hasMinLengthError = false;\n    let hasMaxLengthError = false;\n\n    if (element.hasMinLength) {\n      hasMinLengthError = (value.length < element.minLength);\n    }\n\n    if (element.hasMaxLength) {\n      hasMaxLengthError = (value.length > element.maxLength);\n    }\n\n    if (hasMinLengthError || hasMaxLengthError) {\n      return new LengthValidationError(element);\n    }\n\n    return null;\n  }\n\n  static validateNumericField(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    if (!value.isNumeric) {\n      return new NumericFormatValidationError(element);\n    }\n\n    // since the number is now normalized to en_US, check for the . separator\n    const decimalSeparator = '.';\n\n    if (element.isIntegerFormat) {\n      if (value.textValue.indexOf(decimalSeparator) > -1) {\n        return new NumericFormatValidationError(element);\n      }\n    }\n\n    const numberValue = +value.textValue;\n\n    if ((element.hasMin && numberValue < element.min) || (element.hasMax && numberValue > element.max)) {\n      return new NumericRangeValidationError(element);\n    }\n\n    return null;\n  }\n\n  static validateDateField(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    if (!value.isValid) {\n      return new DateFormatValidationError(element);\n    }\n\n    return null;\n  }\n\n  static validateTimeField(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    if (!value.isValid) {\n      return new TimeFormatValidationError(element);\n    }\n\n    return null;\n  }\n\n  static formatErrors(errors) {\n    const messages = [];\n\n    for (const error of errors) {\n      messages.push(error.message);\n    }\n\n    return messages.join('\\n\\n');\n  }\n}\n"],"file":"feature-validator.js"}