{"version":3,"sources":["../../src/elements/calculated-element.js"],"names":["CalculatedElement","parent","attributes","_attributes","display","expression","DisplayOptions","findCalculatedElementRoot","form","container","type","isSectionElement","isRepeatableElement","findCalculatedElementsForContainer","elements","element","isCalculatedElement","push","concat","TextualElement"],"mappings":";;;;;AAAA;;AACA;;;;;;IAEqBA,iB;;;;;AACnB,6BAAYC,MAAZ,EAAoBC,UAApB,EAAgC;AAAA;;AAC9B,uCAAMD,MAAN,EAAcC,UAAd;AAEA,UAAKC,WAAL,CAAiBC,OAAjB,GAA2BF,UAAU,CAACE,OAAX,CAAmBF,UAA9C;AAEA,UAAKG,UAAL,GAAkBH,UAAU,CAACG,UAA7B;AACA,UAAKD,OAAL,GAAe,IAAIE,0BAAJ,CAAmBJ,UAAU,CAACE,OAA9B,CAAf;AAN8B;AAO/B;;oBAEMG,yB,GAAP,mCAAiCC,IAAjC,EAAuCC,SAAvC,EAAkD;AAChD,QAAIA,SAAS,CAACC,IAAV,IAAkB,IAAtB,EAA4B;AAC1B,UAAID,SAAS,CAACE,gBAAd,EAAgC;AAC9B,eAAOX,iBAAiB,CAACO,yBAAlB,CAA4CC,IAA5C,EAAkDC,SAAS,CAACR,MAA5D,CAAP;AACD,OAFD,MAEO,IAAIQ,SAAS,CAACG,mBAAd,EAAmC;AACxC,eAAOH,SAAP;AACD;AACF;;AACD,WAAOD,IAAP;AACD,G;;oBAEMK,kC,GAAP,4CAA0CJ,SAA1C,EAAqD;AACnD,QAAIK,QAAQ,GAAG,EAAf;;AAEA,yBAAsBL,SAAS,CAACK,QAAhC,kHAA0C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAA/BC,OAA+B;;AACxC,UAAIA,OAAO,CAACC,mBAAZ,EAAiC;AAC/BF,QAAAA,QAAQ,CAACG,IAAT,CAAcF,OAAd;AACD,OAFD,MAEO,IAAIA,OAAO,CAACJ,gBAAZ,EAA8B;AACnCG,QAAAA,QAAQ,GAAGA,QAAQ,CAACI,MAAT,CAAgBlB,iBAAiB,CAACa,kCAAlB,CAAqDE,OAArD,CAAhB,CAAX;AACD;AACF;;AAED,WAAOD,QAAP;AACD,G;;;EAjC4CK,0B","sourcesContent":["import TextualElement from './textual-element';\nimport DisplayOptions from './display-options';\n\nexport default class CalculatedElement extends TextualElement {\n  constructor(parent, attributes) {\n    super(parent, attributes);\n\n    this._attributes.display = attributes.display.attributes;\n\n    this.expression = attributes.expression;\n    this.display = new DisplayOptions(attributes.display);\n  }\n\n  static findCalculatedElementRoot(form, container) {\n    if (container.type != null) {\n      if (container.isSectionElement) {\n        return CalculatedElement.findCalculatedElementRoot(form, container.parent);\n      } else if (container.isRepeatableElement) {\n        return container;\n      }\n    }\n    return form;\n  }\n\n  static findCalculatedElementsForContainer(container) {\n    let elements = [];\n\n    for (const element of container.elements) {\n      if (element.isCalculatedElement) {\n        elements.push(element);\n      } else if (element.isSectionElement) {\n        elements = elements.concat(CalculatedElement.findCalculatedElementsForContainer(element));\n      }\n    }\n\n    return elements;\n  }\n}\n"],"file":"calculated-element.js"}