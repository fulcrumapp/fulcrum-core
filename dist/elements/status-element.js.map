{"version":3,"sources":["../../src/elements/status-element.js"],"names":["DEFAULT_STATUS_ELEMENT","label","key","data_name","enabled","read_only","choices","StatusElement","parent","attributes","type","attrs","Object","assign","_statusFilter","_choices","choice","push","StatusChoice","_enabled","_readOnly","statusForValue","value","resetOverrides","filteredChoices","_overrideIsDisabled","statusFilter","items","filteredItems","item","filter","toLowerCase","indexOf","getOwnPropertyDescriptor","Element","prototype","get","call","TextualElement"],"mappings":"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","sourcesContent":["import TextualElement from './textual-element';\nimport StatusChoice from './status-choice';\nimport Element from './element';\n\nconst DEFAULT_STATUS_ELEMENT = {\n  label: 'Status',\n  key: '@status',\n  data_name: 'status',\n  enabled: false,\n  read_only: false,\n  choices: []\n};\n\nexport default class StatusElement extends TextualElement {\n  constructor(parent, attributes) {\n    attributes.type = 'StatusField';\n\n    const attrs = Object.assign({}, DEFAULT_STATUS_ELEMENT, attributes);\n\n    super(parent, attrs);\n\n    this._statusFilter = null;\n\n    this._choices = [];\n\n    if (attrs.choices) {\n      for (const choice of attrs.choices) {\n        this._choices.push(new StatusChoice(choice));\n      }\n    }\n\n    this._enabled = !!attrs.enabled;\n    this._readOnly = !!attrs.read_only;\n  }\n\n  get choices() {\n    return this.filteredChoices;\n  }\n\n  get isEnabled() {\n    return this._enabled;\n  }\n\n  get isReadOnly() {\n    return this._overrideIsDisabled != null ? this._overrideIsDisabled : this._readOnly;\n  }\n\n  get statusFilter() {\n    return this._statusFilter;\n  }\n\n  set statusFilter(statusFilter) {\n    this._statusFilter = statusFilter;\n  }\n\n  statusForValue(value) {\n    for (const choice of this.choices) {\n      if (choice.value === value) {\n        return choice;\n      }\n    }\n\n    return null;\n  }\n\n  get filteredChoices() {\n    const items = this._choices;\n\n    if (!this.statusFilter) {\n      return items;\n    }\n\n    const filteredItems = [];\n\n    for (const item of items) {\n      for (const filter of this.statusFilter) {\n        if (item.value.toLowerCase().indexOf(filter.toLowerCase()) !== -1) {\n          filteredItems.push(item);\n        }\n      }\n    }\n\n    return filteredItems;\n  }\n\n  get overrideValues() {\n    return Object.assign(Object.getOwnPropertyDescriptor(Element.prototype, 'overrideValues').get.call(this), {\n      statusFilter: this._statusFilter\n    });\n  }\n\n  resetOverrides() {\n    super.resetOverrides();\n\n    this._statusFilter = null;\n  }\n}\n"],"file":"status-element.js"}