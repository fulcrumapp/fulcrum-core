{"version":3,"sources":["../../src/utils/number-utils.js"],"names":["MachineFormatterOptions","style","useGrouping","minimumFractionDigits","maximumFractionDigits","intl","Intl","NumberUtils","parseDouble","input","number","isNaN","localizedStringFromMachineString","machineString","allowDecimals","localeDecimalFormatter","format","localeIntegerFormatter","formatMachine","formatWithFormatter","machineFormatter","formatCurrency","currency","__formatCurrency","Locale","supportsECMA402","options","currencyDisplay","formatter","global","NumberFormat","currentLocale","string","toString","_localeDecimalFormatter","_localeIntegerFormatter","_machineFormatter"],"mappings":"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","sourcesContent":["import Locale from './locale';\n\nconst MachineFormatterOptions = {\n  style: 'decimal',\n  useGrouping: false,\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 20\n};\n\nlet intl = null;\n\nif (typeof Intl !== 'undefined') {\n  /* eslint-disable no-undef */\n  intl = Intl;\n  /* eslint-enable no-undef */\n}\n\nexport default class NumberUtils {\n  static parseDouble(input) {\n    const number = +input;\n\n    if (number == null || isNaN(number)) {\n      return null;\n    }\n\n    return number;\n  }\n\n  static get localeDecimalFormatter() {\n    if (!this._localeDecimalFormatter && intl) {\n      this._localeDecimalFormatter = new intl.NumberFormat([], MachineFormatterOptions);\n    }\n\n    return this._localeDecimalFormatter;\n  }\n\n  static get localeIntegerFormatter() {\n    if (!this._localeIntegerFormatter && intl) {\n      this._localeIntegerFormatter = new intl.NumberFormat([], {useGrouping: false, maximumFractionDigits: 0});\n    }\n\n    return this._localeIntegerFormatter;\n  }\n\n  static get machineFormatter() {\n    if (!this._machineFormatter && intl) {\n      this._machineFormatter = new intl.NumberFormat([ 'en-US' ], MachineFormatterOptions);\n    }\n\n    return this._machineFormatter;\n  }\n\n  static localizedStringFromMachineString(machineString, allowDecimals = true) {\n    if (allowDecimals && NumberUtils.localeDecimalFormatter) {\n      return NumberUtils.localeDecimalFormatter.format(machineString);\n    } else if (NumberUtils.localeIntegerFormatter) {\n      return NumberUtils.localeIntegerFormatter.format(machineString);\n    }\n\n    return machineString;\n  }\n\n  static formatMachine(number) {\n    return NumberUtils.formatWithFormatter(NumberUtils.machineFormatter, number);\n  }\n\n  static formatCurrency(number, currency) {\n    if (number == null) {\n      return null;\n    }\n\n    return NumberUtils.__formatCurrency(number, currency);\n  }\n\n  static __formatCurrency(number, currency) {\n    if (!Locale.supportsECMA402()) {\n      return number;\n    }\n\n    const options = {\n      style: 'currency',\n      currency: currency,\n      currencyDisplay: 'symbol',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    };\n\n    const formatter = new global.Intl.NumberFormat(Locale.currentLocale(), options);\n\n    return formatter.format(number);\n  }\n\n  static formatWithFormatter(formatter, number) {\n    if (formatter != null) {\n      const string = formatter.format(number);\n\n      if (string === 'NaN') {\n        return number;\n      }\n\n      return string;\n    }\n\n    return number.toString();\n  }\n}\n"],"file":"number-utils.js"}