{"version":3,"sources":["../../src/media/track-player.js"],"names":["TrackPlayer","track","firstSegment","firstTimestamp","firstPoint","time","lastTimestamp","lastSegment","lastPoint","duration","firstTimeStamp","findPreviousTrackPointIndexes","segmentIndex","pointIndex","timestamp","milliseconds","segments","segment","points","point","Math","max","length","findPreviousTrackPoint","findNextTrackPoint","trackTime","nextPoint","nextTimestamp","lastLatitude","latitude","lastLongitude","longitude","nextLatitude","nextLongitude","isLastPointInvalid","isNextPointInvalid","range","percentage","lastLocation","nextLocation","lon","lat","location","headingDiff","viewport","courseDiff","course","accuracyDiff","horizontalAccuracy","lastAltitude","altitude","nextAltitude","lastSpeed","speed","nextSpeed","altitudeDiff","speedDiff","abs","heading","accuracy","prev","next"],"mappings":"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","sourcesContent":["export default class TrackPlayer {\n  constructor(track) {\n    this.track = track;\n\n    if (this.track.firstSegment) {\n      this.firstTimestamp = this.track.firstSegment.firstPoint.time;\n      this.lastTimestamp = this.track.lastSegment.lastPoint.time;\n      this.duration = this.lastTimestamp - this.firstTimeStamp;\n    }\n  }\n\n  findPreviousTrackPointIndexes(time) {\n    let segmentIndex = 0;\n    let pointIndex = 0;\n\n    let timestamp = null;\n\n    const milliseconds = time;\n\n    for (const segment of this.track.segments) {\n      for (const point of segment.points) {\n        timestamp = point.time;\n\n        if (timestamp > milliseconds) {\n          return [ segmentIndex, Math.max(0, pointIndex - 1) ];\n        }\n\n        ++pointIndex;\n      }\n\n      ++segmentIndex;\n    }\n\n    // if the video time is beyond the end of the track, return the last index\n    if (milliseconds >= this.lastTimestamp) {\n      return [ this.track.segments.length - 1, this.track.lastSegment.points.length - 1 ];\n    }\n\n    return [ 0, 0 ];\n  }\n\n  findPreviousTrackPoint(time) {\n    const [ segmentIndex, pointIndex ] = this.findPreviousTrackPointIndexes(time);\n    return this.track.segments[segmentIndex].points[pointIndex];\n  }\n\n  findNextTrackPoint(time) {\n    const [ segmentIndex, pointIndex ] = this.findPreviousTrackPointIndexes(time);\n\n    if (pointIndex + 1 < this.track.segments[segmentIndex].points.length) {\n      return this.track.segments[segmentIndex].points[pointIndex + 1];\n    }\n\n    return this.track.segments[segmentIndex].points[pointIndex];\n  }\n\n  point(trackTime) {\n    if (this.track == null || this.track.segments.length === 0) {\n      return null;\n    }\n\n    const time = (trackTime * 1000.0) + this.firstTimestamp;\n\n    const lastPoint = this.findPreviousTrackPoint(time);\n    const nextPoint = this.findNextTrackPoint(time);\n\n    const lastTimestamp = lastPoint.time;\n    const nextTimestamp = nextPoint.time;\n\n    const lastLatitude = lastPoint.latitude;\n    const lastLongitude = lastPoint.longitude;\n\n    const nextLatitude = nextPoint.latitude;\n    const nextLongitude = nextPoint.longitude;\n\n    const isLastPointInvalid = lastLatitude == null || lastLongitude == null;\n    const isNextPointInvalid = nextLatitude == null || nextLongitude == null;\n\n    if (isLastPointInvalid || isNextPointInvalid) {\n      return null;\n    }\n\n    const range = nextTimestamp - lastTimestamp;\n    const percentage = range === 0 ? 0 : (time - lastTimestamp) / range;\n\n    const lastLocation = [ lastPoint.latitude, lastPoint.longitude ];\n    const nextLocation = [ nextPoint.latitude, nextPoint.longitude ];\n\n    const lon = ((nextLocation[1] - lastLocation[1]) * percentage) + lastLocation[1];\n    const lat = ((nextLocation[0] - lastLocation[0]) * percentage) + lastLocation[0];\n\n    const location = [ lat, lon ];\n\n    let headingDiff = nextPoint.viewport - lastPoint.viewport;\n    let courseDiff = nextPoint.course - lastPoint.course;\n\n    const accuracyDiff = nextPoint.horizontalAccuracy - lastPoint.horizontalAccuracy;\n\n    const lastAltitude = lastPoint.altitude;\n    const nextAltitude = nextPoint.altitude;\n\n    const lastSpeed = lastPoint.speed;\n    const nextSpeed = nextPoint.speed;\n\n    let altitudeDiff = null;\n\n    if (lastAltitude != null && nextAltitude != null) {\n      altitudeDiff = nextAltitude - lastAltitude;\n    }\n\n    let speedDiff = null;\n\n    if (lastSpeed != null && nextSpeed != null && lastSpeed > -1 && nextSpeed > -1) {\n      speedDiff = nextSpeed - lastSpeed;\n    }\n\n    /*\n\n    When the diff between the 2 points is greater than 180, we need\n    to reverse the direction of the tweening so it produces the fastest\n    transition between the 2 angles. By negating the different angles we\n    produce a much simpler value.\n\n    Example 1:\n      going from 30 to 350 should produce a -40 degree counterclockwise\n      result, not a 320 clockwise animation\n\n    Example 2:\n      going from 350 to 30 should produce a 40 degree clockwise\n      result, not a 320 counterclockwise animation\n\n    */\n\n    if (Math.abs(headingDiff) > 180) {\n      if (nextPoint.viewport > lastPoint.viewport) {\n        headingDiff = -lastPoint.viewport - (360 - nextPoint.viewport);\n      } else {\n        headingDiff = -(-(360 - lastPoint.viewport) - nextPoint.viewport);\n      }\n    }\n\n    if (Math.abs(courseDiff) > 180) {\n      if (nextPoint.course > lastPoint.course) {\n        courseDiff = -lastPoint.course - (360 - nextPoint.course);\n      } else {\n        courseDiff = -(-(360 - lastPoint.course) - nextPoint.course);\n      }\n    }\n\n    const heading = (headingDiff * percentage) + lastPoint.viewport;\n    const course = (courseDiff * percentage) + lastPoint.course;\n    const accuracy = (accuracyDiff * percentage) + lastPoint.horizontalAccuracy;\n\n    let altitude = null;\n    let speed = null;\n\n    if (altitudeDiff != null) {\n      altitude = (altitudeDiff * percentage) + lastPoint.altitude;\n    }\n\n    if (speedDiff != null) {\n      speed = (speedDiff * percentage) + lastPoint.speed;\n    }\n\n    return {\n      time: time,\n      location: location,\n      course: course,\n      viewport: heading,\n      speed: speed,\n      altitude: altitude,\n      accuracy: accuracy,\n      prev: lastPoint,\n      next: nextPoint\n    };\n  }\n}\n"],"file":"track-player.js"}