{"version":3,"sources":["../../src/media/track.js"],"names":["Track","id","attributes","_id","_segments","Array","isArray","tracks","track","_attributes","trackSegment","segment","TrackSegment","points","length","push","_toLineSegments","lines","segments","line","point","hasCoordinate","longitude","latitude","time","toGPX","GPX","render","toKML","KML","toSRT","SRT","toJSONString","JSON","stringify","toGeoJSONString","lineString","toGeoJSONMultiLineString","features","type","toGeoJSONLines","_geoJSONLines","properties","geometry","coordinates","_geoJSONMultiLineString","toGeoJSONSegments","_geoJSONSegments","previousPoint","firstLocation","firstSegment","lastSegment","lastLocation","firstPoint","lastPoint"],"mappings":"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","sourcesContent":["import TrackSegment from './track-segment';\nimport GPX from './gpx';\nimport KML from './kml';\nimport SRT from './srt';\n\nexport default class Track {\n  constructor(id, attributes) {\n    this._id = id;\n    this._segments = [];\n\n    if (Array.isArray(attributes)) {\n      attributes = {tracks: [ {track: attributes} ]};\n    }\n\n    this._attributes = attributes;\n\n    if (attributes.tracks) {\n      for (const trackSegment of attributes.tracks) {\n        const segment = new TrackSegment(trackSegment);\n\n        if (segment.points.length) {\n          this._segments.push(segment);\n        }\n      }\n    }\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get isValid() {\n    return this.firstLocation != null;\n  }\n\n  get segments() {\n    return this._segments;\n  }\n\n  get firstSegment() {\n    return this._segments[0];\n  }\n\n  get lastSegment() {\n    return this._segments[this._segments.length - 1];\n  }\n\n  get firstLocation() {\n    return this.firstSegment && this.firstSegment.firstLocation;\n  }\n\n  get lastLocation() {\n    return this.lastSegment && this.lastSegment.lastLocation;\n  }\n\n  get firstPoint() {\n    return this.firstSegment && this.firstSegment.firstPoint;\n  }\n\n  get lastPoint() {\n    return this.lastSegment && this.lastSegment.lastPoint;\n  }\n\n  get representativePoint() {\n    if (this.firstSegment) {\n      return this.toGeoJSONLines().geometry.coordinates[0];\n    }\n\n    return null;\n  }\n\n  _toLineSegments() {\n    const lines = [];\n\n    for (const segment of this.segments) {\n      const line = [];\n\n      for (const point of segment.points) {\n        if (point.hasCoordinate) {\n          line.push([ point.longitude, point.latitude, point.time ]);\n        }\n      }\n\n      if (line.length > 1) {\n        lines.push(line);\n      }\n    }\n\n    return lines;\n  }\n\n  toGPX() {\n    return GPX.render([ this ]);\n  }\n\n  toKML() {\n    return KML.render([ this ]);\n  }\n\n  toSRT() {\n    return SRT.render([ this ]);\n  }\n\n  toJSONString() {\n    return JSON.stringify(this._attributes);\n  }\n\n  toGeoJSONString() {\n    const lineString = this.toGeoJSONMultiLineString();\n\n    const features = lineString ? [ lineString ] : [];\n\n    return JSON.stringify({\n      type: 'FeatureCollection',\n      features: features\n    });\n  }\n\n  toGeoJSONLines() {\n    if (this._geoJSONLines) {\n      return this._geoJSONLines;\n    }\n\n    const lines = this._toLineSegments();\n\n    this._geoJSONLines = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'LineString',\n        coordinates: lines[0]\n      }\n    };\n\n    return this._geoJSONLines;\n  }\n\n  toGeoJSONMultiLineString() {\n    if (this._geoJSONMultiLineString) {\n      return this._geoJSONMultiLineString;\n    }\n\n    const lines = this._toLineSegments();\n\n    if (lines.length === 0) {\n      return null;\n    }\n\n    this._geoJSONMultiLineString = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'MultiLineString',\n        coordinates: lines\n      }\n    };\n\n    return this._geoJSONMultiLineString;\n  }\n\n  toGeoJSONSegments() {\n    if (this._geoJSONSegments) {\n      return this._geoJSONSegments;\n    }\n\n    const lines = [];\n\n    let previousPoint = null;\n\n    for (const segment of this.segments) {\n      for (const point of segment.points) {\n        if (point.hasCoordinate) {\n          if (previousPoint) {\n            lines.push({\n              type: 'Feature',\n              properties: {\n                time: point.time\n              },\n              geometry: {\n                type: 'LineString',\n                coordinates: [\n                  [ previousPoint.longitude, previousPoint.latitude ],\n                  [ point.longitude, point.latitude ]\n                ]\n              }\n            });\n          }\n\n          previousPoint = point;\n        }\n      }\n    }\n\n    this._geoJSONSegments = {\n      type: 'FeatureCollection',\n      features: lines\n    };\n\n    return this._geoJSONSegments;\n  }\n}\n"],"file":"track.js"}