{"version":3,"sources":["../../src/values/time-value.js"],"names":["TimeValue","isLessThan","stringValue","isEmpty","TextUtils","thisTime","timeValue","thatTime","DateUtils","parseTime","isGreaterThan","format","useDisplayValue","displayValue","columnValue","textValue","isValidTime","isValid","TextualValue"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;;;;;;;IAEqBA,S;;;;;;;;;;;SASnBC,U,GAAA,oBAAWC,WAAX,EAAwB;AACtB,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAOC,sBAAUD,OAAV,CAAkBD,WAAlB,CAAP;AACD;;AAED,QAAMG,QAAQ,GAAG,KAAKC,SAAtB;;AACA,QAAMC,QAAQ,GAAGC,sBAAUC,SAAV,CAAoBP,WAApB,CAAjB;;AAEA,QAAIG,QAAQ,IAAI,IAAZ,IAAoBE,QAAQ,IAAI,IAApC,EAA0C;AACxC,aAAO,KAAP;AACD;;AAED,WAAOF,QAAQ,GAAGE,QAAlB;AACD,G;;SAEDG,a,GAAA,uBAAcR,WAAd,EAA2B;AACzB,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAOC,sBAAUD,OAAV,CAAkBD,WAAlB,CAAP;AACD;;AAED,QAAMG,QAAQ,GAAG,KAAKC,SAAtB;;AACA,QAAMC,QAAQ,GAAGC,sBAAUC,SAAV,CAAoBP,WAApB,CAAjB;;AAEA,QAAIG,QAAQ,IAAI,IAAZ,IAAoBE,QAAQ,IAAI,IAApC,EAA0C;AACxC,aAAO,KAAP;AACD;;AAED,WAAOF,QAAQ,GAAGE,QAAlB;AACD,G;;SAkBDI,M,GAAA,sBAAkC;AAAA,oCAA1BC,eAA0B;AAAA,QAA1BA,eAA0B,qCAAR,KAAQ;;AAChC,QAAIA,eAAJ,EAAqB;AACnB,aAAO,KAAKC,YAAZ;AACD;;AAED,WAAO,KAAKC,WAAZ;AACD,G;;;;wBA5DkB;AACjB,aAAO,KAAKC,SAAZ;AACD;;;wBAEqB;AACpB,aAAO,KAAKA,SAAZ;AACD;;;wBAgCa;AACZ,UAAI,KAAKZ,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,aAAOK,sBAAUQ,WAAV,CAAsB,KAAKD,SAA3B,CAAP;AACD;;;wBAEe;AACd,UAAI,KAAKZ,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,aAAOK,sBAAUC,SAAV,CAAoB,KAAKM,SAAzB,CAAP;AACD;;;wBAUiB;AAChB,UAAI,CAAC,KAAKE,OAAV,EAAmB;AACjB,eAAO,IAAP;AACD;;AAED,aAAO,KAAKF,SAAL,IAAkB,IAAzB;AACD;;;;EArEoCG,wB","sourcesContent":["import TextualValue from './textual-value';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class TimeValue extends TextualValue {\n  get displayValue() {\n    return this.textValue;\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  isLessThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisTime = this.timeValue;\n    const thatTime = DateUtils.parseTime(stringValue);\n\n    if (thisTime == null || thatTime == null) {\n      return false;\n    }\n\n    return thisTime < thatTime;\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisTime = this.timeValue;\n    const thatTime = DateUtils.parseTime(stringValue);\n\n    if (thisTime == null || thatTime == null) {\n      return false;\n    }\n\n    return thisTime > thatTime;\n  }\n\n  get isValid() {\n    if (this.isEmpty) {\n      return true;\n    }\n\n    return DateUtils.isValidTime(this.textValue);\n  }\n\n  get timeValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return DateUtils.parseTime(this.textValue);\n  }\n\n  format({useDisplayValue = false}) {\n    if (useDisplayValue) {\n      return this.displayValue;\n    }\n\n    return this.columnValue;\n  }\n\n  get columnValue() {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return this.textValue || null;\n  }\n}\n"],"file":"time-value.js"}