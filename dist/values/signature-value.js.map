{"version":3,"sources":["../../src/values/signature-value.js"],"names":["SignatureValue","element","attributes","_identifier","signature_id","_timestamp","DateUtils","parseISOTimestamp","timestamp","clear","format","part","formatSignatureURL","formatSignatureViewerURL","formatSignatureName","args","isEmpty","id","toJSON","formatISOTimestamp","isEqual","value","contains","startsWith","isLessThan","isGreaterThan","Date","TypeError","key","FormValue"],"mappings":"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","sourcesContent":["import FormValue from './form-value';\nimport DateUtils from '../utils/date-utils';\n\nexport default class SignatureValue extends FormValue {\n  constructor(element, attributes) {\n    super(element, attributes);\n\n    if (attributes) {\n      this._identifier = attributes.signature_id;\n      this._timestamp = DateUtils.parseISOTimestamp(attributes.timestamp);\n    }\n  }\n\n  get id() {\n    return this._identifier;\n  }\n\n  set id(id) {\n    this._identifier = id;\n  }\n\n  get timestamp() {\n    return this._timestamp;\n  }\n\n  set timestamp(timestamp) {\n    if (!(timestamp instanceof Date)) {\n      throw new TypeError('timestamp must be a Date');\n    }\n\n    this._timestamp = timestamp;\n  }\n\n  clear() {\n    this._identifier = null;\n    this._timestamp = null;\n  }\n\n  get isEmpty() {\n    return this._identifier == null;\n  }\n\n  get displayValue() {\n    return this.isEmpty ? null : '1 Signature';\n  }\n\n  get searchableValue() {\n    return null;\n  }\n\n  format({part = null, formatSignatureURL, formatSignatureViewerURL, formatSignatureName, ...args}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (part === 'timestamp') {\n      return this.timestamp;\n    } else if (part === 'view' && formatSignatureViewerURL) {\n      return formatSignatureViewerURL(this, args);\n    } else if (part === 'url' && formatSignatureURL) {\n      return formatSignatureURL(this, args);\n    } else if (part === 'name' && formatSignatureName) {\n      return formatSignatureName(this, args);\n    }\n\n    return this.id;\n  }\n\n  get length() {\n    return this.isEmpty ? 0 : 1;\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const value = {};\n\n    value['f' + this.element.key + '_timestamp'] = this.timestamp;\n    value['f' + this.element.key] = this._identifier;\n\n    return value;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return {\n      signature_id: this._identifier,\n      timestamp: DateUtils.formatISOTimestamp(this._timestamp)\n    };\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return false;\n  }\n\n  isGreaterThan(value) {\n    return false;\n  }\n}\n"],"file":"signature-value.js"}