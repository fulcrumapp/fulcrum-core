{"version":3,"sources":["../../src/values/record-link-value.js"],"names":["RecordLinkValue","element","items","_items","item","push","RecordLinkItemValue","format","part","isEmpty","map","displayValue","id","toJSON","isEqual","value","contains","startsWith","isLessThan","length","NumberUtils","parseDouble","isGreaterThan","addRecord","record","record_id","_record","insertItem","itemIndex","index","removeItem","splice","ids","MultipleValueItem","slice","FormValue"],"mappings":"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","sourcesContent":["import FormValue from './form-value';\nimport RecordLinkItemValue from './record-link-item-value';\nimport MultipleValueItem from './multiple-value-item';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class RecordLinkValue extends FormValue {\n  constructor(element, items) {\n    super(element, items);\n\n    this._items = [];\n\n    if (items) {\n      for (const item of items) {\n        this._items.push(new RecordLinkItemValue(this, item));\n      }\n    }\n  }\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (this.length === 1) {\n      return '1 record';\n    }\n\n    return this.length + ' records';\n  }\n\n  get searchableValue() {\n    return this.displayValue;\n  }\n\n  get length() {\n    return this._items.length;\n  }\n\n  format({part = null}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (part === 'titles') {\n      return this.items.map(item => item.displayValue);\n    }\n\n    return this.items.map(item => item.id);\n  }\n\n  toJSON() {\n    const items = [];\n\n    for (const item of this._items) {\n      items.push(item.toJSON());\n    }\n\n    return items;\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const ids = [];\n\n    for (const item of this._items) {\n      ids.push(item.id);\n    }\n\n    return ids;\n  }\n\n  get multipleValues() {\n    const ids = [];\n\n    for (const item of this._items) {\n      ids.push(new MultipleValueItem(this.element, item.id));\n    }\n\n    return ids;\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return this.length < NumberUtils.parseDouble(value);\n  }\n\n  isGreaterThan(value) {\n    return this.length > NumberUtils.parseDouble(value);\n  }\n\n  get items() {\n    return this._items.slice();\n  }\n\n  addRecord(record) {\n    const item = new RecordLinkItemValue(this, {record_id: record.id});\n\n    item._record = record;\n\n    this.insertItem(item);\n  }\n\n  itemIndex(id) {\n    for (let index = 0; index < this._items.length; ++index) {\n      if (id === this._items[index].id) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n\n  insertItem(item) {\n    const index = this.itemIndex(item.id);\n\n    if (index > -1) {\n      this._items[index] = item;\n    } else {\n      this._items.push(item);\n    }\n  }\n\n  removeItem(id) {\n    const index = this.itemIndex(id);\n\n    if (index > -1) {\n      const item = this._items[index];\n\n      this._items.splice(index, 1);\n\n      return item;\n    }\n\n    return null;\n  }\n}\n"],"file":"record-link-value.js"}