{"version":3,"sources":["../../src/values/classification-value.js"],"names":["DisplaySeparator","SearchSeparator","ClassificationValue","element","attributes","_choiceValues","_otherValues","choice_values","choice","TextUtils","isPresent","push","other_values","isEqual","value","classification","selectedClassification","choiceValues","toJSON","ESCAPED","parts","replace","split","map","part","allMatchSoFar","partIndex","length","toLowerCase","contains","startsWith","format","useDisplayValue","isEmpty","labelStrings","valueStrings","slice","otherValues","toSimpleJSON","labels","strings","setSelectedClassification","otherValue","Classification","setSelectedClassificationJSON","classificationAsJSON","toString","exploded","item","label","hasOtherValue","values","join","allValues","result","currentClassifications","classificationItems","classificationValue","trim","items","FormValue"],"mappings":"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","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport Classification from '../elements/classification';\n\nconst DisplaySeparator = ' â–¸ ';\n\nconst SearchSeparator = ' ';\n\nexport default class ClassificationValue extends FormValue {\n  constructor(element, attributes) {\n    super(element, attributes);\n\n    this._choiceValues = [];\n    this._otherValues = [];\n\n    if (attributes) {\n      if (attributes.choice_values) {\n        for (const choice of attributes.choice_values) {\n          if (TextUtils.isPresent(choice)) {\n            this._choiceValues.push(choice);\n          }\n        }\n      }\n\n      if (attributes.other_values) {\n        for (const choice of attributes.other_values) {\n          if (TextUtils.isPresent(choice)) {\n            this._otherValues.push(choice);\n          }\n        }\n      }\n    }\n  }\n\n  get isEmpty() {\n    if (this._choiceValues.length) {\n      return false;\n    }\n\n    if (this._otherValues.length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isEqual(value) {\n    const classification = this.selectedClassification;\n\n    const choiceValues = classification ? classification.toJSON() : null;\n\n    const ESCAPED = /\\\\,/g;\n\n    const parts = value.replace(ESCAPED, '\\t\\t').split(',').map(part => part.replace(/\\t\\t/g, ','));\n\n    let allMatchSoFar = false;\n\n    let partIndex = 0;\n\n    for (const part of parts) {\n      if (part != null && choiceValues && partIndex < choiceValues.length &&\n          choiceValues[partIndex].toLowerCase() === part.replace(ESCAPED, ',').toLowerCase()) {\n        allMatchSoFar = true;\n      } else {\n        allMatchSoFar = false;\n        break;\n      }\n\n      ++partIndex;\n    }\n\n    return allMatchSoFar;\n  }\n\n  contains(value) {\n    return this.isEqual(value);\n  }\n\n  startsWith(value) {\n    return this.contains(value);\n  }\n\n  get labelStrings() {\n    const labels = [];\n\n    const classification = this.selectedClassification;\n\n    if (classification) {\n      for (const item of classification.exploded) {\n        if (item.label) {\n          labels.push(item.label);\n        }\n      }\n    }\n\n    if (this.hasOtherValue) {\n      labels.push(this.otherValue);\n    }\n\n    return labels;\n  }\n\n  get valueStrings() {\n    const values = [];\n\n    for (const value of this._choiceValues) {\n      values.push(value);\n    }\n\n    for (const value of this._otherValues) {\n      values.push(value);\n    }\n\n    return values;\n  }\n\n  get displayValue() {\n    // When a classification entry has been removed but this record still has\n    // the value associated with the removed entry, just show the raw value.\n    if (this.labelStrings.length === 0) {\n      return this.valueStrings.join(DisplaySeparator);\n    }\n\n    return this.labelStrings.join(DisplaySeparator);\n  }\n\n  get searchableValue() {\n    const values = [];\n\n    const classification = this.selectedClassification;\n\n    if (classification) {\n      for (const item of classification.exploded) {\n        if (item.label) {\n          values.push(item.label);\n        }\n\n        if (item.value && item.value !== item.label) {\n          values.push(item.value);\n        }\n      }\n    }\n\n    if (this.hasOtherValue) {\n      values.push(this.otherValue);\n    }\n\n    return values.join(SearchSeparator);\n  }\n\n  format({useDisplayValue = false}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return useDisplayValue && this.labelStrings.length > 0 ? this.labelStrings : this.valueStrings;\n  }\n\n  get length() {\n    return this._choiceValues.length + this._otherValues.length;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const choiceValues = this._choiceValues.slice();\n    const otherValues = this._otherValues.slice();\n\n    return {\n      choice_values: choiceValues,\n      other_values: otherValues\n    };\n  }\n\n  toSimpleJSON({labels} = {}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const strings = labels ? this.labelStrings : this.valueStrings;\n\n    return strings;\n  }\n\n  get columnValue() {\n    const allValues = this.valueStrings;\n\n    if (allValues.length === 0) {\n      return null;\n    }\n\n    return allValues;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  get hasOtherValue() {\n    return this._otherValues.length !== 0;\n  }\n\n  get otherValue() {\n    if (!this.hasOtherValue) {\n      return null;\n    }\n\n    return this._otherValues[0];\n  }\n\n  set otherValue(value) {\n    if (value && value.length) {\n      this._otherValues = [ value ];\n    } else {\n      this._otherValues = [];\n    }\n  }\n\n  get selectedClassification() {\n    let result = null;\n\n    if (this._choiceValues.length === 0) {\n      return null;\n    }\n\n    let currentClassifications = this.element.classificationItems;\n\n    for (const classificationValue of this._choiceValues) {\n      for (const classification of currentClassifications) {\n        if (TextUtils.trim(classification.value) === TextUtils.trim(classificationValue)) {\n          result = classification;\n          currentClassifications = classification.items;\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  setSelectedClassification(classification, otherValue) {\n    if (classification instanceof Classification) {\n      this.setSelectedClassificationJSON(classification.toJSON(), otherValue);\n    } else {\n      this.setSelectedClassificationJSON(null, otherValue);\n    }\n  }\n\n  setSelectedClassificationJSON(classificationAsJSON, otherValue) {\n    if (classificationAsJSON && classificationAsJSON.length) {\n      this._choiceValues = classificationAsJSON;\n    } else {\n      this._choiceValues = [];\n    }\n\n    if (otherValue) {\n      this._otherValues = [ otherValue.toString() ];\n    } else {\n      this._otherValues = [];\n    }\n  }\n}\n"],"file":"classification-value.js"}