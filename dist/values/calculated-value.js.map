{"version":3,"file":"calculated-value.js","names":["CalculatedValue","element","value","error","format","useDisplayValue","isEmpty","displayValue","display","isCurrency","isNumber","NumberUtils","parseDouble","textValue","isDate","Date","hasError","date","isNaN","getTime","TextualValue"],"sources":["../../src/values/calculated-value.js"],"sourcesContent":["import TextualValue from './textual-value';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class CalculatedValue extends TextualValue {\n  constructor(element, value) {\n    super(element, value);\n\n    this.error = null;\n  }\n\n  format({useDisplayValue = false}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (useDisplayValue) {\n      return this.displayValue;\n    }\n\n    const display = this.element.display;\n\n    // - for currency or number display, return the numeric value\n    // - for date calculations return the date\n    // - for text (and anything else) just return the string value\n\n    if (display.isCurrency || display.isNumber) {\n      return NumberUtils.parseDouble(this.textValue);\n    } else if (display.isDate) {\n      return new Date(`${this.textValue} 00:00:00Z`);\n    }\n\n    return this.textValue;\n  }\n\n  get displayValue() {\n    if (this.hasError) {\n      return this.error;\n    }\n\n    return this.element.display.format(this.textValue);\n  }\n\n  get hasError() {\n    return this.error != null;\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const display = this.element.display;\n\n    // - for currency or number display, return the numeric value\n    // - for date calculations return the UTC epoch seconds\n    // - for text (and anything else) just return the string value\n\n    if (display.isCurrency || display.isNumber) {\n      return NumberUtils.parseDouble(this.textValue);\n    } else if (display.isDate) {\n      const date = new Date(`${this.textValue} 00:00:00Z`);\n\n      if (date && !isNaN(date)) {\n        return date.getTime() / 1000;\n      }\n\n      return null;\n    }\n\n    return this.textValue;\n  }\n}\n\n"],"mappings":";;;;;AAAA;;AACA;;;;;;;;;;;;IAEqBA,e;;;EACnB,yBAAYC,OAAZ,EAAqBC,KAArB,EAA4B;IAAA;;IAC1B,iCAAMD,OAAN,EAAeC,KAAf;IAEA,MAAKC,KAAL,GAAa,IAAb;IAH0B;EAI3B;;;;SAEDC,M,GAAA,sBAAkC;IAAA,gCAA1BC,eAA0B;IAAA,IAA1BA,eAA0B,qCAAR,KAAQ;;IAChC,IAAI,KAAKC,OAAT,EAAkB;MAChB,OAAO,IAAP;IACD;;IAED,IAAID,eAAJ,EAAqB;MACnB,OAAO,KAAKE,YAAZ;IACD;;IAED,IAAMC,OAAO,GAAG,KAAKP,OAAL,CAAaO,OAA7B,CATgC,CAWhC;IACA;IACA;;IAEA,IAAIA,OAAO,CAACC,UAAR,IAAsBD,OAAO,CAACE,QAAlC,EAA4C;MAC1C,OAAOC,uBAAA,CAAYC,WAAZ,CAAwB,KAAKC,SAA7B,CAAP;IACD,CAFD,MAEO,IAAIL,OAAO,CAACM,MAAZ,EAAoB;MACzB,OAAO,IAAIC,IAAJ,CAAY,KAAKF,SAAjB,gBAAP;IACD;;IAED,OAAO,KAAKA,SAAZ;EACD,C;;;;SAED,eAAmB;MACjB,IAAI,KAAKG,QAAT,EAAmB;QACjB,OAAO,KAAKb,KAAZ;MACD;;MAED,OAAO,KAAKF,OAAL,CAAaO,OAAb,CAAqBJ,MAArB,CAA4B,KAAKS,SAAjC,CAAP;IACD;;;SAED,eAAe;MACb,OAAO,KAAKV,KAAL,IAAc,IAArB;IACD;;;SAED,eAAkB;MAChB,IAAI,KAAKG,OAAT,EAAkB;QAChB,OAAO,IAAP;MACD;;MAED,IAAME,OAAO,GAAG,KAAKP,OAAL,CAAaO,OAA7B,CALgB,CAOhB;MACA;MACA;;MAEA,IAAIA,OAAO,CAACC,UAAR,IAAsBD,OAAO,CAACE,QAAlC,EAA4C;QAC1C,OAAOC,uBAAA,CAAYC,WAAZ,CAAwB,KAAKC,SAA7B,CAAP;MACD,CAFD,MAEO,IAAIL,OAAO,CAACM,MAAZ,EAAoB;QACzB,IAAMG,IAAI,GAAG,IAAIF,IAAJ,CAAY,KAAKF,SAAjB,gBAAb;;QAEA,IAAII,IAAI,IAAI,CAACC,KAAK,CAACD,IAAD,CAAlB,EAA0B;UACxB,OAAOA,IAAI,CAACE,OAAL,KAAiB,IAAxB;QACD;;QAED,OAAO,IAAP;MACD;;MAED,OAAO,KAAKN,SAAZ;IACD;;;;EAnE0CO,wB"}