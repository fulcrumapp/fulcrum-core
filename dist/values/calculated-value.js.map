{"version":3,"file":"calculated-value.js","names":["CalculatedValue","element","value","error","format","useDisplayValue","isEmpty","displayValue","display","isCurrency","isNumber","NumberUtils","parseDouble","textValue","isDate","Date","hasError","date","isNaN","getTime","TextualValue"],"sources":["../../src/values/calculated-value.js"],"sourcesContent":["import TextualValue from './textual-value';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class CalculatedValue extends TextualValue {\n  constructor(element, value) {\n    super(element, value);\n\n    this.error = null;\n  }\n\n  format({useDisplayValue = false}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (useDisplayValue) {\n      return this.displayValue;\n    }\n\n    const display = this.element.display;\n\n    // - for currency or number display, return the numeric value\n    // - for date calculations return the date\n    // - for text (and anything else) just return the string value\n\n    if (display.isCurrency || display.isNumber) {\n      return NumberUtils.parseDouble(this.textValue);\n    } else if (display.isDate) {\n      return new Date(`${this.textValue} 00:00:00Z`);\n    }\n\n    return this.textValue;\n  }\n\n  get displayValue() {\n    if (this.hasError) {\n      return this.error;\n    }\n\n    return this.element.display.format(this.textValue);\n  }\n\n  get hasError() {\n    return this.error != null;\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const display = this.element.display;\n\n    // - for currency or number display, return the numeric value\n    // - for date calculations return the UTC epoch seconds\n    // - for text (and anything else) just return the string value\n\n    if (display.isCurrency || display.isNumber) {\n      return NumberUtils.parseDouble(this.textValue);\n    } else if (display.isDate) {\n      const date = new Date(`${this.textValue} 00:00:00Z`);\n\n      if (date && !isNaN(date)) {\n        return date.getTime() / 1000;\n      }\n\n      return null;\n    }\n\n    return this.textValue;\n  }\n}\n\n"],"mappings":";;;;AAAA;AACA;AAAgD;AAAA;AAAA;AAAA;AAAA;AAAA,IAE3BA,eAAe;EAAA;EAClC,yBAAYC,OAAO,EAAEC,KAAK,EAAE;IAAA;IAC1B,iCAAMD,OAAO,EAAEC,KAAK,CAAC;IAErB,MAAKC,KAAK,GAAG,IAAI;IAAC;EACpB;EAAC;EAAA,OAEDC,MAAM,GAAN,sBAAkC;IAAA,gCAA1BC,eAAe;MAAfA,eAAe,qCAAG,KAAK;IAC7B,IAAI,IAAI,CAACC,OAAO,EAAE;MAChB,OAAO,IAAI;IACb;IAEA,IAAID,eAAe,EAAE;MACnB,OAAO,IAAI,CAACE,YAAY;IAC1B;IAEA,IAAMC,OAAO,GAAG,IAAI,CAACP,OAAO,CAACO,OAAO;;IAEpC;IACA;IACA;;IAEA,IAAIA,OAAO,CAACC,UAAU,IAAID,OAAO,CAACE,QAAQ,EAAE;MAC1C,OAAOC,uBAAW,CAACC,WAAW,CAAC,IAAI,CAACC,SAAS,CAAC;IAChD,CAAC,MAAM,IAAIL,OAAO,CAACM,MAAM,EAAE;MACzB,OAAO,IAAIC,IAAI,CAAI,IAAI,CAACF,SAAS,gBAAa;IAChD;IAEA,OAAO,IAAI,CAACA,SAAS;EACvB,CAAC;EAAA;IAAA;IAAA,KAED,eAAmB;MACjB,IAAI,IAAI,CAACG,QAAQ,EAAE;QACjB,OAAO,IAAI,CAACb,KAAK;MACnB;MAEA,OAAO,IAAI,CAACF,OAAO,CAACO,OAAO,CAACJ,MAAM,CAAC,IAAI,CAACS,SAAS,CAAC;IACpD;EAAC;IAAA;IAAA,KAED,eAAe;MACb,OAAO,IAAI,CAACV,KAAK,IAAI,IAAI;IAC3B;EAAC;IAAA;IAAA,KAED,eAAkB;MAChB,IAAI,IAAI,CAACG,OAAO,EAAE;QAChB,OAAO,IAAI;MACb;MAEA,IAAME,OAAO,GAAG,IAAI,CAACP,OAAO,CAACO,OAAO;;MAEpC;MACA;MACA;;MAEA,IAAIA,OAAO,CAACC,UAAU,IAAID,OAAO,CAACE,QAAQ,EAAE;QAC1C,OAAOC,uBAAW,CAACC,WAAW,CAAC,IAAI,CAACC,SAAS,CAAC;MAChD,CAAC,MAAM,IAAIL,OAAO,CAACM,MAAM,EAAE;QACzB,IAAMG,IAAI,GAAG,IAAIF,IAAI,CAAI,IAAI,CAACF,SAAS,gBAAa;QAEpD,IAAII,IAAI,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC,EAAE;UACxB,OAAOA,IAAI,CAACE,OAAO,EAAE,GAAG,IAAI;QAC9B;QAEA,OAAO,IAAI;MACb;MAEA,OAAO,IAAI,CAACN,SAAS;IACvB;EAAC;EAAA;AAAA,EAnE0CO,wBAAY;AAAA"}