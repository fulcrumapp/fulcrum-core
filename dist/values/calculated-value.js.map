{"version":3,"sources":["../../src/values/calculated-value.js"],"names":["CalculatedValue","element","value","error","format","useDisplayValue","isEmpty","displayValue","display","isCurrency","isNumber","NumberUtils","parseDouble","textValue","isDate","Date","hasError","date","isNaN","getTime","TextualValue"],"mappings":";;;;;AAAA;;AACA;;;;;;;;;;IAEqBA,e;;;;;AACnB,2BAAYC,OAAZ,EAAqBC,KAArB,EAA4B;AAAA;;AAC1B,qCAAMD,OAAN,EAAeC,KAAf;AAEA,UAAKC,KAAL,GAAa,IAAb;AAH0B;AAI3B;;;;SAEDC,M,GAAA,sBAAkC;AAAA,oCAA1BC,eAA0B;AAAA,QAA1BA,eAA0B,qCAAR,KAAQ;;AAChC,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,QAAID,eAAJ,EAAqB;AACnB,aAAO,KAAKE,YAAZ;AACD;;AAED,QAAMC,OAAO,GAAG,KAAKP,OAAL,CAAaO,OAA7B,CATgC,CAWhC;AACA;AACA;;AAEA,QAAIA,OAAO,CAACC,UAAR,IAAsBD,OAAO,CAACE,QAAlC,EAA4C;AAC1C,aAAOC,wBAAYC,WAAZ,CAAwB,KAAKC,SAA7B,CAAP;AACD,KAFD,MAEO,IAAIL,OAAO,CAACM,MAAZ,EAAoB;AACzB,aAAO,IAAIC,IAAJ,CAAY,KAAKF,SAAjB,gBAAP;AACD;;AAED,WAAO,KAAKA,SAAZ;AACD,G;;;;wBAEkB;AACjB,UAAI,KAAKG,QAAT,EAAmB;AACjB,eAAO,KAAKb,KAAZ;AACD;;AAED,aAAO,KAAKF,OAAL,CAAaO,OAAb,CAAqBJ,MAArB,CAA4B,KAAKS,SAAjC,CAAP;AACD;;;wBAEc;AACb,aAAO,KAAKV,KAAL,IAAc,IAArB;AACD;;;wBAEiB;AAChB,UAAI,KAAKG,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,UAAME,OAAO,GAAG,KAAKP,OAAL,CAAaO,OAA7B,CALgB,CAOhB;AACA;AACA;;AAEA,UAAIA,OAAO,CAACC,UAAR,IAAsBD,OAAO,CAACE,QAAlC,EAA4C;AAC1C,eAAOC,wBAAYC,WAAZ,CAAwB,KAAKC,SAA7B,CAAP;AACD,OAFD,MAEO,IAAIL,OAAO,CAACM,MAAZ,EAAoB;AACzB,YAAMG,IAAI,GAAG,IAAIF,IAAJ,CAAY,KAAKF,SAAjB,gBAAb;;AAEA,YAAII,IAAI,IAAI,CAACC,KAAK,CAACD,IAAD,CAAlB,EAA0B;AACxB,iBAAOA,IAAI,CAACE,OAAL,KAAiB,IAAxB;AACD;;AAED,eAAO,IAAP;AACD;;AAED,aAAO,KAAKN,SAAZ;AACD;;;;EAnE0CO,wB","sourcesContent":["import TextualValue from './textual-value';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class CalculatedValue extends TextualValue {\n  constructor(element, value) {\n    super(element, value);\n\n    this.error = null;\n  }\n\n  format({useDisplayValue = false}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (useDisplayValue) {\n      return this.displayValue;\n    }\n\n    const display = this.element.display;\n\n    // - for currency or number display, return the numeric value\n    // - for date calculations return the date\n    // - for text (and anything else) just return the string value\n\n    if (display.isCurrency || display.isNumber) {\n      return NumberUtils.parseDouble(this.textValue);\n    } else if (display.isDate) {\n      return new Date(`${this.textValue} 00:00:00Z`);\n    }\n\n    return this.textValue;\n  }\n\n  get displayValue() {\n    if (this.hasError) {\n      return this.error;\n    }\n\n    return this.element.display.format(this.textValue);\n  }\n\n  get hasError() {\n    return this.error != null;\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const display = this.element.display;\n\n    // - for currency or number display, return the numeric value\n    // - for date calculations return the UTC epoch seconds\n    // - for text (and anything else) just return the string value\n\n    if (display.isCurrency || display.isNumber) {\n      return NumberUtils.parseDouble(this.textValue);\n    } else if (display.isDate) {\n      const date = new Date(`${this.textValue} 00:00:00Z`);\n\n      if (date && !isNaN(date)) {\n        return date.getTime() / 1000;\n      }\n\n      return null;\n    }\n\n    return this.textValue;\n  }\n}\n\n"],"file":"calculated-value.js"}