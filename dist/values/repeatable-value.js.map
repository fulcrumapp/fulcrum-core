{"version":3,"sources":["../../src/values/repeatable-value.js"],"names":["SearchSeparator","RepeatableValue","element","items","_items","item","push","RepeatableItemValue","length","format","options","isEmpty","useDisplayValue","displayValue","toJSON","toSimpleJSON","simple","isEqual","value","contains","startsWith","isLessThan","isGreaterThan","mapItems","callback","slice","map","forEachItem","itemIndex","id","index","insertItem","removeItem","splice","createNewItem","attributes","uuid","v4","form_values","values","searchValue","searchableValue","TextUtils","isPresent","join","FormValue"],"mappings":"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","sourcesContent":["import FormValue from './form-value';\nimport RepeatableItemValue from './repeatable-item-value';\nimport TextUtils from '../utils/text-utils';\nimport uuid from 'uuid';\n\nconst SearchSeparator = ' ';\n\nexport default class RepeatableValue extends FormValue {\n  constructor(element, items) {\n    super(element, items);\n\n    this._items = [];\n\n    if (items != null) {\n      for (const item of items) {\n        this._items.push(new RepeatableItemValue(this.element, item, this._items.length));\n      }\n    }\n  }\n\n  get isEmpty() {\n    return this._items.length === 0;\n  }\n\n  get displayValue() {\n    if (this.length === 1) {\n      return '1 Item';\n    }\n\n    return this.length + ' Items';\n  }\n\n  get searchableValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const values = [];\n\n    for (const item of this._items) {\n      const searchValue = item.searchableValue;\n\n      if (TextUtils.isPresent(searchValue)) {\n        values.push(searchValue);\n      }\n    }\n\n    return values.join(SearchSeparator);\n  }\n\n  format(options) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return options.useDisplayValue ? this.displayValue : this.length;\n  }\n\n  get length() {\n    return this._items.length;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const items = [];\n\n    for (const item of this._items) {\n      items.push(item.toJSON());\n    }\n\n    return items;\n  }\n\n  toSimpleJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const items = [];\n\n    for (const item of this._items) {\n      items.push(item.toJSON({simple: true}));\n    }\n\n    return items;\n  }\n\n  get columnValue() {\n    return null;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return false;\n  }\n\n  isGreaterThan(value) {\n    return false;\n  }\n\n  mapItems(callback) {\n    return this._items.slice().map(callback);\n  }\n\n  // return a copy until it's determined that a mutable API is necessary\n  get items() {\n    return this._items.slice();\n  }\n\n  forEachItem(callback) {\n    this.mapItems(callback);\n  }\n\n  itemIndex(id) {\n    for (let index = 0; index < this._items.length; ++index) {\n      if (id === this._items[index].id) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n\n  insertItem(item) {\n    const index = this.itemIndex(item.id);\n\n    if (index > -1) {\n      this._items[index] = item;\n    } else {\n      this._items.push(item);\n    }\n  }\n\n  removeItem(id) {\n    const index = this.itemIndex(id);\n\n    if (index > -1) {\n      const item = this._items[index];\n\n      this._items.splice(index, 1);\n\n      return item;\n    }\n\n    return null;\n  }\n\n  createNewItem() {\n    const attributes = {\n      id: uuid.v4(),\n      form_values: {}\n    };\n\n    return new RepeatableItemValue(this.element, attributes, this._items.length);\n  }\n}\n"],"file":"repeatable-value.js"}