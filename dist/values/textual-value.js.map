{"version":3,"sources":["../../src/values/textual-value.js"],"names":["TextualValue","element","textValue","toString","format","useDisplayValue","isEmpty","displayValue","toJSON","isEqual","stringValue","TextUtils","string","toLowerCase","contains","startsWith","isLessThan","thisValue","NumberUtils","parseDouble","thatValue","isGreaterThan","length","number","FormValue"],"mappings":"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","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class TextualValue extends FormValue {\n  constructor(element, textValue) {\n    super(element, textValue);\n\n    this.textValue = textValue != null ? textValue.toString() : null;\n  }\n\n  format({useDisplayValue = false}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return useDisplayValue ? this.displayValue : this.textValue;\n  }\n\n  get isEmpty() {\n    return this.textValue == null || this.textValue.length === 0;\n  }\n\n  get displayValue() {\n    return this.textValue || '';\n  }\n\n  get searchableValue() {\n    return this.displayValue || '';\n  }\n\n  get length() {\n    if (this.textValue != null) {\n      return this.textValue.length;\n    }\n\n    return 0;\n  }\n\n  get columnValue() {\n    return this.textValue || null;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.textValue;\n  }\n\n  isEqual(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const string = (stringValue == null ? '' : stringValue.toString());\n\n    return this.textValue.toLowerCase() === string.toLowerCase();\n  }\n\n  contains(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    if (stringValue == null) {\n      return false;\n    }\n\n    const string = stringValue.toString();\n\n    return TextUtils.contains(this.textValue, string);\n  }\n\n  startsWith(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    if (stringValue == null) {\n      return false;\n    }\n\n    return TextUtils.startsWith(this.textValue, stringValue.toString());\n  }\n\n  isLessThan(stringValue) {\n    if (this.textValue == null || stringValue == null) {\n      return false;\n    }\n\n    let string = null;\n\n    if (stringValue != null) {\n      string = stringValue.toString();\n    }\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(string);\n\n    if (thisValue == null || thatValue == null) {\n      return false;\n    }\n\n    return thisValue < thatValue;\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.textValue == null || stringValue == null) {\n      return false;\n    }\n\n    const string = (stringValue == null ? '' : stringValue.toString());\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(string);\n\n    if (thisValue == null || thatValue == null) {\n      return false;\n    }\n\n    return thisValue > thatValue;\n  }\n\n  get numericValue() {\n    return NumberUtils.parseDouble(this.textValue);\n  }\n\n  get isNumeric() {\n    if (!this.isEmpty) {\n      const number = NumberUtils.parseDouble(this.textValue);\n\n      return number != null;\n    }\n\n    return true;\n  }\n}\n"],"file":"textual-value.js"}