{"version":3,"sources":["../../src/values/address-value.js"],"names":["AddressValue","element","attributes","address","Address","format","part","isEmpty","toJSON","searchableValue","isEqual","stringValue","contains","startsWith","isLessThan","isGreaterThan","lines","join","displayValue","length","value","Object","keys","key","FormValue"],"mappings":";;;;;AAAA;;AACA;;;;;;;;;;IAEqBA,Y;;;;;AACnB,wBAAYC,OAAZ,EAAqBC,UAArB,EAAiC;AAAA;;AAC/B,kCAAMD,OAAN;AAEA,UAAKE,OAAL,GAAe,IAAIC,mBAAJ,CAAYF,UAAZ,CAAf;AAH+B;AAIhC;;;;SAsCDG,M,GAAA,sBAAsB;AAAA,yBAAdC,IAAc;AAAA,QAAdA,IAAc,0BAAP,IAAO;;AACpB,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,QAAID,IAAJ,EAAU;AACR,aAAO,KAAKH,OAAL,CAAaK,MAAb,GAAsBF,IAAtB,CAAP;AACD;;AAED,WAAO,KAAKG,eAAZ;AACD,G;;SAEDD,M,GAAA,kBAAS;AACP,QAAI,KAAKD,OAAT,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,WAAO,KAAKJ,OAAL,CAAaK,MAAb,EAAP;AACD,G;;SAEDE,O,GAAA,iBAAQC,WAAR,EAAqB;AACnB,WAAO,KAAP;AACD,G;;SAEDC,Q,GAAA,kBAASD,WAAT,EAAsB;AACpB,WAAO,KAAP;AACD,G;;SAEDE,U,GAAA,oBAAWF,WAAX,EAAwB;AACtB,WAAO,KAAP;AACD,G;;SAEDG,U,GAAA,oBAAWH,WAAX,EAAwB;AACtB,WAAO,KAAP;AACD,G;;SAEDI,a,GAAA,uBAAcJ,WAAd,EAA2B;AACzB,WAAO,KAAP;AACD,G;;;;wBA1Ea;AACZ,aAAO,KAAKR,OAAL,CAAaI,OAApB;AACD;;;wBAEkB;AACjB,aAAO,KAAKJ,OAAL,CAAaa,KAAb,CAAmBC,IAAnB,CAAwB,IAAxB,CAAP;AACD;;;wBAEqB;AACpB,aAAO,KAAKd,OAAL,CAAaa,KAAb,CAAmBC,IAAnB,CAAwB,GAAxB,CAAP;AACD;;;wBAEY;AACX,aAAO,KAAKC,YAAL,CAAkBC,MAAzB;AACD;;;wBAEiB;AAChB,UAAMC,KAAK,GAAG,EAAd;AAEA,UAAMjB,OAAO,GAAG,KAAKA,OAAL,CAAaK,MAAb,EAAhB;;AAEA,sCAAkBa,MAAM,CAACC,IAAP,CAAYnB,OAAZ,CAAlB,kCAAwC;AAAnC,YAAMoB,GAAG,mBAAT;AACHH,QAAAA,KAAK,CAAC,MAAM,KAAKnB,OAAL,CAAasB,GAAnB,GAAyB,GAAzB,GAA+BA,GAAhC,CAAL,GAA4CpB,OAAO,CAACoB,GAAD,CAAnD;AACD;;AAEDH,MAAAA,KAAK,CAAC,MAAM,KAAKnB,OAAL,CAAasB,GAApB,CAAL,GAAgC,KAAKd,eAArC;AAEA,aAAOW,KAAP;AACD;;;wBAEoB;AACnB,aAAO,IAAP,CADmB,CAEnB;AACA;AACD;;;;EAzCuCI,qB","sourcesContent":["import FormValue from './form-value';\nimport Address from './address';\n\nexport default class AddressValue extends FormValue {\n  constructor(element, attributes) {\n    super(element);\n\n    this.address = new Address(attributes);\n  }\n\n  get isEmpty() {\n    return this.address.isEmpty;\n  }\n\n  get displayValue() {\n    return this.address.lines.join('\\n');\n  }\n\n  get searchableValue() {\n    return this.address.lines.join(' ');\n  }\n\n  get length() {\n    return this.displayValue.length;\n  }\n\n  get columnValue() {\n    const value = {};\n\n    const address = this.address.toJSON();\n\n    for (const key of Object.keys(address)) {\n      value['f' + this.element.key + '_' + key] = address[key];\n    }\n\n    value['f' + this.element.key] = this.searchableValue;\n\n    return value;\n  }\n\n  get multipleValues() {\n    return null;\n    // TODO(zhm) implement\n    // throw new Error('Not implemented');\n  }\n\n  format({part = null}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (part) {\n      return this.address.toJSON()[part];\n    }\n\n    return this.searchableValue;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.address.toJSON();\n  }\n\n  isEqual(stringValue) {\n    return false;\n  }\n\n  contains(stringValue) {\n    return false;\n  }\n\n  startsWith(stringValue) {\n    return false;\n  }\n\n  isLessThan(stringValue) {\n    return false;\n  }\n\n  isGreaterThan(stringValue) {\n    return false;\n  }\n}\n"],"file":"address-value.js"}