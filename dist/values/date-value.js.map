{"version":3,"file":"date-value.js","names":["DateValue","isLessThan","stringValue","isEmpty","TextUtils","thisDate","dateValue","thatDate","DateUtils","parseDate","getTime","isGreaterThan","format","useDisplayValue","displayValue","columnValue","date","formatLocalizedDate","textValue","isValidDate","TextualValue"],"sources":["../../src/values/date-value.js"],"sourcesContent":["import TextualValue from './textual-value';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class DateValue extends TextualValue {\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const date = this.dateValue;\n\n    if (date == null) {\n      return null;\n    }\n\n    return DateUtils.formatLocalizedDate(date);\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  isLessThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue;\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() < thatDate.getTime();\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue;\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() > thatDate.getTime();\n  }\n\n  get isValid() {\n    if (this.isEmpty) {\n      return true;\n    }\n\n    return DateUtils.isValidDate(this.textValue);\n  }\n\n  get dateValue() {\n    return DateUtils.parseDate(this.textValue);\n  }\n\n  format({useDisplayValue = false}) {\n    if (useDisplayValue) {\n      return this.displayValue;\n    }\n\n    return this.columnValue;\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.dateValue;\n\n    // The following code can be used to convert a date to a unix timestamp integer\n    //\n    // const timestamp = this.textValue + 'T00:00:00Z';\n    // const date = DateUtils.parseISOTimestamp(timestamp);\n    // return date ? date.getTime() / 1000 : null;\n  }\n}\n"],"mappings":";;;;AAAA;AACA;AACA;AAA4C;AAAA;AAAA;AAAA;AAAA;AAAA,IAEvBA,SAAS;EAAA;EAAA;IAAA;EAAA;EAAA;EAAA,OAmB5BC,UAAU,GAAV,oBAAWC,WAAW,EAAE;IACtB,IAAI,IAAI,CAACC,OAAO,EAAE;MAChB,OAAOC,qBAAS,CAACD,OAAO,CAACD,WAAW,CAAC;IACvC;IAEA,IAAMG,QAAQ,GAAG,IAAI,CAACC,SAAS;IAC/B,IAAMC,QAAQ,GAAGC,qBAAS,CAACC,SAAS,CAACP,WAAW,CAAC;IAEjD,IAAIG,QAAQ,IAAI,IAAI,IAAIE,QAAQ,IAAI,IAAI,EAAE;MACxC,OAAO,KAAK;IACd;IAEA,OAAOF,QAAQ,CAACK,OAAO,EAAE,GAAGH,QAAQ,CAACG,OAAO,EAAE;EAChD,CAAC;EAAA,OAEDC,aAAa,GAAb,uBAAcT,WAAW,EAAE;IACzB,IAAI,IAAI,CAACC,OAAO,EAAE;MAChB,OAAOC,qBAAS,CAACD,OAAO,CAACD,WAAW,CAAC;IACvC;IAEA,IAAMG,QAAQ,GAAG,IAAI,CAACC,SAAS;IAC/B,IAAMC,QAAQ,GAAGC,qBAAS,CAACC,SAAS,CAACP,WAAW,CAAC;IAEjD,IAAIG,QAAQ,IAAI,IAAI,IAAIE,QAAQ,IAAI,IAAI,EAAE;MACxC,OAAO,KAAK;IACd;IAEA,OAAOF,QAAQ,CAACK,OAAO,EAAE,GAAGH,QAAQ,CAACG,OAAO,EAAE;EAChD,CAAC;EAAA,OAcDE,MAAM,GAAN,sBAAkC;IAAA,gCAA1BC,eAAe;MAAfA,eAAe,qCAAG,KAAK;IAC7B,IAAIA,eAAe,EAAE;MACnB,OAAO,IAAI,CAACC,YAAY;IAC1B;IAEA,OAAO,IAAI,CAACC,WAAW;EACzB,CAAC;EAAA;IAAA;IAAA,KAlED,eAAmB;MACjB,IAAI,IAAI,CAACZ,OAAO,EAAE;QAChB,OAAO,IAAI;MACb;MAEA,IAAMa,IAAI,GAAG,IAAI,CAACV,SAAS;MAE3B,IAAIU,IAAI,IAAI,IAAI,EAAE;QAChB,OAAO,IAAI;MACb;MAEA,OAAOR,qBAAS,CAACS,mBAAmB,CAACD,IAAI,CAAC;IAC5C;EAAC;IAAA;IAAA,KAED,eAAsB;MACpB,OAAO,IAAI,CAACE,SAAS;IACvB;EAAC;IAAA;IAAA,KAgCD,eAAc;MACZ,IAAI,IAAI,CAACf,OAAO,EAAE;QAChB,OAAO,IAAI;MACb;MAEA,OAAOK,qBAAS,CAACW,WAAW,CAAC,IAAI,CAACD,SAAS,CAAC;IAC9C;EAAC;IAAA;IAAA,KAED,eAAgB;MACd,OAAOV,qBAAS,CAACC,SAAS,CAAC,IAAI,CAACS,SAAS,CAAC;IAC5C;EAAC;IAAA;IAAA,KAUD,eAAkB;MAChB,IAAI,IAAI,CAACf,OAAO,EAAE;QAChB,OAAO,IAAI;MACb;MAEA,OAAO,IAAI,CAACG,SAAS;;MAErB;MACA;MACA;MACA;MACA;IACF;EAAC;EAAA;AAAA,EAjFoCc,wBAAY;AAAA"}