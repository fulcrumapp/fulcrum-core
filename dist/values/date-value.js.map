{"version":3,"file":"date-value.js","names":["DateValue","isLessThan","stringValue","isEmpty","TextUtils","thisDate","dateValue","thatDate","DateUtils","parseDate","getTime","isGreaterThan","format","useDisplayValue","displayValue","columnValue","date","formatLocalizedDate","textValue","isValidDate","TextualValue"],"sources":["../../src/values/date-value.js"],"sourcesContent":["import TextualValue from './textual-value';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class DateValue extends TextualValue {\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const date = this.dateValue;\n\n    if (date == null) {\n      return null;\n    }\n\n    return DateUtils.formatLocalizedDate(date);\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  isLessThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue;\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() < thatDate.getTime();\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue;\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() > thatDate.getTime();\n  }\n\n  get isValid() {\n    if (this.isEmpty) {\n      return true;\n    }\n\n    return DateUtils.isValidDate(this.textValue);\n  }\n\n  get dateValue() {\n    return DateUtils.parseDate(this.textValue);\n  }\n\n  format({useDisplayValue = false}) {\n    if (useDisplayValue) {\n      return this.displayValue;\n    }\n\n    return this.columnValue;\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.dateValue;\n\n    // The following code can be used to convert a date to a unix timestamp integer\n    //\n    // const timestamp = this.textValue + 'T00:00:00Z';\n    // const date = DateUtils.parseISOTimestamp(timestamp);\n    // return date ? date.getTime() / 1000 : null;\n  }\n}\n"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;IAEqBA,S;;;;;;;;;SAmBnBC,U,GAAA,oBAAWC,WAAX,EAAwB;IACtB,IAAI,KAAKC,OAAT,EAAkB;MAChB,OAAOC,qBAAA,CAAUD,OAAV,CAAkBD,WAAlB,CAAP;IACD;;IAED,IAAMG,QAAQ,GAAG,KAAKC,SAAtB;;IACA,IAAMC,QAAQ,GAAGC,qBAAA,CAAUC,SAAV,CAAoBP,WAApB,CAAjB;;IAEA,IAAIG,QAAQ,IAAI,IAAZ,IAAoBE,QAAQ,IAAI,IAApC,EAA0C;MACxC,OAAO,KAAP;IACD;;IAED,OAAOF,QAAQ,CAACK,OAAT,KAAqBH,QAAQ,CAACG,OAAT,EAA5B;EACD,C;;SAEDC,a,GAAA,uBAAcT,WAAd,EAA2B;IACzB,IAAI,KAAKC,OAAT,EAAkB;MAChB,OAAOC,qBAAA,CAAUD,OAAV,CAAkBD,WAAlB,CAAP;IACD;;IAED,IAAMG,QAAQ,GAAG,KAAKC,SAAtB;;IACA,IAAMC,QAAQ,GAAGC,qBAAA,CAAUC,SAAV,CAAoBP,WAApB,CAAjB;;IAEA,IAAIG,QAAQ,IAAI,IAAZ,IAAoBE,QAAQ,IAAI,IAApC,EAA0C;MACxC,OAAO,KAAP;IACD;;IAED,OAAOF,QAAQ,CAACK,OAAT,KAAqBH,QAAQ,CAACG,OAAT,EAA5B;EACD,C;;SAcDE,M,GAAA,sBAAkC;IAAA,gCAA1BC,eAA0B;IAAA,IAA1BA,eAA0B,qCAAR,KAAQ;;IAChC,IAAIA,eAAJ,EAAqB;MACnB,OAAO,KAAKC,YAAZ;IACD;;IAED,OAAO,KAAKC,WAAZ;EACD,C;;;;SAlED,eAAmB;MACjB,IAAI,KAAKZ,OAAT,EAAkB;QAChB,OAAO,IAAP;MACD;;MAED,IAAMa,IAAI,GAAG,KAAKV,SAAlB;;MAEA,IAAIU,IAAI,IAAI,IAAZ,EAAkB;QAChB,OAAO,IAAP;MACD;;MAED,OAAOR,qBAAA,CAAUS,mBAAV,CAA8BD,IAA9B,CAAP;IACD;;;SAED,eAAsB;MACpB,OAAO,KAAKE,SAAZ;IACD;;;SAgCD,eAAc;MACZ,IAAI,KAAKf,OAAT,EAAkB;QAChB,OAAO,IAAP;MACD;;MAED,OAAOK,qBAAA,CAAUW,WAAV,CAAsB,KAAKD,SAA3B,CAAP;IACD;;;SAED,eAAgB;MACd,OAAOV,qBAAA,CAAUC,SAAV,CAAoB,KAAKS,SAAzB,CAAP;IACD;;;SAUD,eAAkB;MAChB,IAAI,KAAKf,OAAT,EAAkB;QAChB,OAAO,IAAP;MACD;;MAED,OAAO,KAAKG,SAAZ,CALgB,CAOhB;MACA;MACA;MACA;MACA;IACD;;;;EAjFoCc,wB"}